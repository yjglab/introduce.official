generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  name     String    @unique
  password String
  social   Social?
  position String
  class    UserClass @default(normal)
  role     UserRole  @default(user)

  projectPosts ProjectPost[]
  findingPosts FindingPost[]

  likedProjectPosts ProjectPost[] @relation("UserLikedProjectPosts")
  likedFindingPosts FindingPost[] @relation("UserLikedFindingPosts")

  markedProjectPosts ProjectPost[] @relation("UserMarkedProjectPosts")
  markedFindingPosts FindingPost[] @relation("UserMarkedFindingPosts")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectPost {
  id          Int                  @id @default(autoincrement())
  category    String
  title       String
  description String
  sourceName  String
  sourceLink  String
  sourceOwner String
  grades      Float                @default(0)
  createdAt   DateTime             @default(now())
  user        User                 @relation(fields: [userId], references: [id])
  userId      Int
  skills      PostSkill[]          @relation("ProjectPostSkills")
  likers      User[]               @relation("UserLikedProjectPosts")
  markers     User[]               @relation("UserMarkedProjectPosts")
  sections    ProjectPostSection[]
}

model FindingPost {
  id          Int                  @id @default(autoincrement())
  category    String
  title       String
  description String
  deadline    String
  user        User                 @relation(fields: [userId], references: [id])
  userId      Int
  skills      PostSkill[]          @relation("FindingPostSkills")
  likers      User[]               @relation("UserLikedFindingPosts")
  markers     User[]               @relation("UserMarkedFindingPosts")
  sections    FindingPostSection[]
}

model Social {
  id           Int    @id @default(autoincrement())
  connectionId String
  name         String
  user         User   @relation(fields: [userId], references: [id])
  userId       Int    @unique
}

model ProjectPostSection {
  id          Int                       @id @default(autoincrement())
  header      String
  description String
  images      ProjectPostSectionImage[]
  post        ProjectPost               @relation(fields: [postId], references: [id])
  postId      Int
}

model FindingPostSection {
  id          Int                       @id @default(autoincrement())
  header      String
  description String
  images      FindingPostSectionImage[]
  post        FindingPost               @relation(fields: [postId], references: [id])
  postId      Int
}

model ProjectPostSectionImage {
  id        Int                @id @default(autoincrement())
  src       String
  section   ProjectPostSection @relation(fields: [sectionId], references: [id])
  sectionId Int
}

model FindingPostSectionImage {
  id        Int                @id @default(autoincrement())
  src       String
  section   FindingPostSection @relation(fields: [sectionId], references: [id])
  sectionId Int
}

model PostSkill {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  projectPosts ProjectPost[] @relation("ProjectPostSkills")
  findingPosts FindingPost[] @relation("FindingPostSkills")
}

enum UserClass {
  normal
  pro
}

enum UserRole {
  user
  admin
}
